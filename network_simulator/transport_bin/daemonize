#!/usr/bin/env python2

"""
Copyright 2015 Malte Splietker

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

from argparse import ArgumentParser
import os
import os.path
import subprocess


def main():
    parser = ArgumentParser(description="""
        Run a command in background and print its PID.

        Stdout and stderr of the command are written to
        \"Directory/processes/PID\".

        When the process terminates, its PID is written to
        \"Directory/pids_successful\" or \"Directory/pids_failed\" depending on
        the process's return value.""")
    parser.add_argument("directory", metavar="Directory",
                        help="Working directory")
    parser.add_argument("command", metavar="Command",
                        help="Command to execute in background")
    parser.add_argument("args", metavar="Argument", nargs="*",
                        help="Optional arguments for Command")
    args = parser.parse_args()

    (r, w) = os.pipe()
    pid = os.fork()

    if pid == 0:
        # Child process:
        working_directory = args.directory
        logging_directory = os.path.join(working_directory, "processes")
        if not os.path.isdir(logging_directory):
            os.makedirs(logging_directory)

        # Start the command as background process
        command = args.command
        arguments = args.args
        process = subprocess.Popen(
            [command] + arguments, stderr=subprocess.STDOUT,
            stdout=subprocess.PIPE)

        # Send the background process's PID to the parent process
        os.write(w, str(process.pid))
        os.close(r)
        os.close(w)

        # Write the process's stdout and stderr to a file
        log_path = os.path.join(logging_directory, str(process.pid))
        with open(log_path, "w") as log_file:
            log_file.write(process.stdout.read())

        process.wait()
        if process.returncode == 0:
            pid_file = os.path.join(working_directory, "pids_successful")
        else:
            pid_file = os.path.join(working_directory, "pids_failed")
        with open(pid_file, "a") as f:
            f.write("%i\n" % process.pid)
    else:
        # Parent process:
        # Get PID from child process
        pid = os.read(r, 10)
        os.close(w)
        os.close(r)
        print(pid)

if __name__ == "__main__":
    main()
